---
import {CollectionEntry, getCollection} from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';
import {Markup, Markdown} from 'astro-remote';
import shiki from "shiki";

import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import CallToAction from "../../components/CallToAction.astro";
import {Marked} from "marked";
import {baseUrl} from "marked-base-url";
import {markedHighlight} from "marked-highlight";

interface Props {
    entry: CollectionEntry<'open-source'>;
}
export async function getStaticPaths() {
    const work = await getCollection(
        'open-source',
        ({data}) => !data.draft
    );
    return work.map((entry,) => ({
        params: {slug: entry.slug},
        props: {entry},
    }));
}
const {entry} = Astro.props;
const {Content} = await entry.render();

const githubInfo = await fetch(`https://api.github.com/repos/${entry.data.project}`).then(r => r.json())
const hl = await shiki.getHighlighter({theme: 'github-dark'});
const marked = new Marked(markedHighlight({
    highlight: function (code, lang) {
        return hl.codeToHtml(code, lang);
    }
}))

marked.use(baseUrl(`https://github.com/${entry.data.project}/blob/main/`));
let githubReadme = marked.parse(await fetch(`https://raw.githubusercontent.com/${entry.data.project}/${githubInfo.default_branch}/README.md`).then(r => r.text()))
---

<BaseLayout title={entry.data.title + ' | Alan COLANT'} description={githubInfo.description}>

    <div class="stack gap-20">
        <div class="stack gap-15">
            <header>
                <div class="wrapper stack gap-2">
                    <a class="back-link" href="/open-source/">
                        <Icon icon="arrow-left"/>
                        Open source
                    </a>
                    <Hero title={entry.data.title} align="start">
                        <div class="details">
                            <div class="tags">
                                {entry.data.tags.map(
                                    t =>
                                            <Pill>{t}</Pill>
                                )}
                            </div>
                            <p class="description">{githubInfo.description}</p>
                        </div>
                    </Hero>
                </div>
            </header>
            <main class="wrapper">
                <div class="stack gap-10 content">
                    {entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''}/>}
                    <div class="content">
                        <Content/>
                        {githubReadme && (
                                <h4>README.md</h4>
                                <hr/>
                                <article class="content" set:html={githubReadme}/>
                        )}
                        {githubInfo?.html_url && (
                                <CallToAction href={githubInfo.html_url} external>
                                    GitHub
                                    <Icon icon="github-logo" size="1.2em"/>
                                </CallToAction>
                        )}

                    </div>
                </div>
            </main>
        </div>
        <ContactCTA/>
    </div>
</BaseLayout>

<style>
    header {
        padding-bottom: 2.5rem;
        border-bottom: 1px solid var(--gray-800);
    }

    .back-link {
        display: none;
    }

    .details {
        display: flex;
        flex-direction: column;
        padding: 0.5rem;
        gap: 1.5rem;
        justify-content: space-between;
        align-items: center;
    }

    .tags {
        display: flex;
        gap: 0.5rem;
    }

    .description {
        font-size: var(--text-lg);
        max-width: 54ch;
    }

    .content {
        max-width: 90ch;
        margin-inline: auto;
    }

    .content > :global(* + *) {
        margin-top: 1rem;
    }

    .content :global(h1),
    .content :global(h2),
    .content :global(h3),
    .content :global(h4),
    .content :global(h5) {
        margin: 1.5rem 0;
    }

    .content :global(img) {
        border-radius: 1.5rem;
        box-shadow: var(--shadow-sm);
        background: var(--gradient-subtle);
        border: 1px solid var(--gray-800);
    }

    .content :global(blockquote) {
        font-size: var(--text-lg);
        font-family: var(--font-brand);
        font-weight: 600;
        line-height: 1.1;
        padding-inline-start: 1.5rem;
        border-inline-start: 0.25rem solid var(--accent-dark);
        color: var(--gray-0);
    }

    .back-link,
    .content :global(a) {
        text-decoration: 1px solid underline transparent;
        text-underline-offset: 0.25em;
        transition: text-decoration-color var(--theme-transition);
    }

    .back-link:hover,
    .back-link:focus,
    .content :global(a:hover),
    .content :global(a:focus) {
        text-decoration-color: currentColor;
    }

    .content :global(pre) {
        padding: 1rem 0.5rem;
        border-radius: 0.5em;
        overflow: auto;
    }
    @media (min-width: 50em) {
        .back-link {
            display: block;
            align-self: flex-start;
        }

        .details {
            flex-direction: row;
            gap: 2.5rem;
        }

        .content :global(blockquote) {
            font-size: var(--text-2xl);
        }
    }
</style>
